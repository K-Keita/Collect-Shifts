[{"/Users/kitagawakeita/testProject/shift-app/src/index.js":"1","/Users/kitagawakeita/testProject/shift-app/src/reportWebVitals.js":"2","/Users/kitagawakeita/testProject/shift-app/src/templates/index.js":"3","/Users/kitagawakeita/testProject/shift-app/src/templates/Home.jsx":"4","/Users/kitagawakeita/testProject/shift-app/src/footer/index.js":"5","/Users/kitagawakeita/testProject/shift-app/src/footer/Footer.jsx":"6","/Users/kitagawakeita/testProject/shift-app/src/header/index.js":"7","/Users/kitagawakeita/testProject/shift-app/src/header/Header.jsx":"8","/Users/kitagawakeita/testProject/shift-app/src/templates/RegistShift.jsx":"9","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/index.js":"10","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/PrimaryButton.jsx":"11","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TimeSelect.jsx":"12","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ToggleShift.jsx":"13","/Users/kitagawakeita/testProject/shift-app/src/templates/ManagementPage.jsx":"14","/Users/kitagawakeita/testProject/shift-app/src/reducks/store/store.js":"15","/Users/kitagawakeita/testProject/shift-app/src/App.jsx":"16","/Users/kitagawakeita/testProject/shift-app/src/Router.jsx":"17","/Users/kitagawakeita/testProject/shift-app/src/components/index.js":"18","/Users/kitagawakeita/testProject/shift-app/src/components/ShiftTable.jsx":"19","/Users/kitagawakeita/testProject/shift-app/src/templates/Members.jsx":"20","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/UsersList.jsx":"21","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/SecondButton.jsx":"22","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/reducers.js":"23","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/actions.js":"24","/Users/kitagawakeita/testProject/shift-app/src/reducks/store/initialState.js":"25","/Users/kitagawakeita/testProject/shift-app/src/serviceWorker.js":"26","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/selectors.js":"27","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TextInput.jsx":"28","/Users/kitagawakeita/testProject/shift-app/src/templates/CreateGroupPage.jsx":"29","/Users/kitagawakeita/testProject/shift-app/src/templates/SignIn.jsx":"30","/Users/kitagawakeita/testProject/shift-app/src/templates/ShiftList.jsx":"31","/Users/kitagawakeita/testProject/shift-app/src/templates/SignUp.jsx":"32","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/reducers.js":"33","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/actions.js":"34","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/operations.js":"35","/Users/kitagawakeita/testProject/shift-app/src/firebase/index.js":"36","/Users/kitagawakeita/testProject/shift-app/src/firebase/config.js":"37","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/operations.js":"38","/Users/kitagawakeita/testProject/shift-app/src/templates/EnterGroupPage.jsx":"39","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ConfirmDialog.jsx":"40","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/selectors.js":"41","/Users/kitagawakeita/testProject/shift-app/src/Auth.jsx":"42","/Users/kitagawakeita/testProject/shift-app/src/components/ToggleContent.jsx":"43","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeGroupName.jsx":"44","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/index.js":"45","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeName.jsx":"46","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangePassword.jsx":"47","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/RegistManage.jsx":"48","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ExitGroup.jsx":"49","/Users/kitagawakeita/testProject/shift-app/src/templates/Top.jsx":"50","/Users/kitagawakeita/testProject/shift-app/src/templates/Reset.jsx":"51","/Users/kitagawakeita/testProject/shift-app/src/components/ImageArea.jsx":"52","/Users/kitagawakeita/testProject/shift-app/src/components/ImagePreview.jsx":"53","/Users/kitagawakeita/testProject/shift-app/src/components/NoImage.jsx":"54","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/SaveGroupIcon.jsx":"55","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/SignOut.jsx":"56"},{"size":848,"mtime":1607178650539,"results":"57","hashOfConfig":"58"},{"size":362,"mtime":1607083320949,"results":"59","hashOfConfig":"58"},{"size":562,"mtime":1608114172269,"results":"60","hashOfConfig":"58"},{"size":1973,"mtime":1608117277965,"results":"61","hashOfConfig":"58"},{"size":46,"mtime":1608114171172,"results":"62","hashOfConfig":"58"},{"size":2696,"mtime":1608196884795,"results":"63","hashOfConfig":"58"},{"size":46,"mtime":1608114171203,"results":"64","hashOfConfig":"58"},{"size":2081,"mtime":1608208249185,"results":"65","hashOfConfig":"58"},{"size":3459,"mtime":1608241683434,"results":"66","hashOfConfig":"58"},{"size":518,"mtime":1608114170989,"results":"67","hashOfConfig":"58"},{"size":898,"mtime":1608114171005,"results":"68","hashOfConfig":"58"},{"size":1521,"mtime":1608114171044,"results":"69","hashOfConfig":"58"},{"size":2345,"mtime":1608241173850,"results":"70","hashOfConfig":"58"},{"size":1308,"mtime":1608116621046,"results":"71","hashOfConfig":"58"},{"size":657,"mtime":1608110436441,"results":"72","hashOfConfig":"58"},{"size":383,"mtime":1608114170796,"results":"73","hashOfConfig":"58"},{"size":1354,"mtime":1608114171826,"results":"74","hashOfConfig":"58"},{"size":272,"mtime":1608114170865,"results":"75","hashOfConfig":"58"},{"size":3560,"mtime":1608244131989,"results":"76","hashOfConfig":"58"},{"size":1444,"mtime":1608114984953,"results":"77","hashOfConfig":"58"},{"size":1239,"mtime":1608114171099,"results":"78","hashOfConfig":"58"},{"size":202,"mtime":1608114171013,"results":"79","hashOfConfig":"58"},{"size":397,"mtime":1608195683727,"results":"80","hashOfConfig":"58"},{"size":518,"mtime":1607510143439,"results":"81","hashOfConfig":"58"},{"size":367,"mtime":1608197401393,"results":"82","hashOfConfig":"58"},{"size":5098,"mtime":1607178612762,"results":"83","hashOfConfig":"58"},{"size":454,"mtime":1608114171753,"results":"84","hashOfConfig":"58"},{"size":858,"mtime":1608114171027,"results":"85","hashOfConfig":"58"},{"size":2181,"mtime":1608211609297,"results":"86","hashOfConfig":"58"},{"size":2091,"mtime":1608241754468,"results":"87","hashOfConfig":"58"},{"size":1889,"mtime":1608242637915,"results":"88","hashOfConfig":"58"},{"size":2319,"mtime":1608114172516,"results":"89","hashOfConfig":"58"},{"size":645,"mtime":1608196943762,"results":"90","hashOfConfig":"58"},{"size":933,"mtime":1608195535319,"results":"91","hashOfConfig":"58"},{"size":16162,"mtime":1608200677396,"results":"92","hashOfConfig":"58"},{"size":460,"mtime":1608114171125,"results":"93","hashOfConfig":"58"},{"size":339,"mtime":1608114171114,"results":"94","hashOfConfig":"58"},{"size":6432,"mtime":1608211879195,"results":"95","hashOfConfig":"58"},{"size":1710,"mtime":1608209473288,"results":"96","hashOfConfig":"58"},{"size":2448,"mtime":1608241563064,"results":"97","hashOfConfig":"58"},{"size":851,"mtime":1608197334213,"results":"98","hashOfConfig":"58"},{"size":599,"mtime":1608114170812,"results":"99","hashOfConfig":"58"},{"size":786,"mtime":1608116506234,"results":"100","hashOfConfig":"58"},{"size":1559,"mtime":1608114171950,"results":"101","hashOfConfig":"58"},{"size":398,"mtime":1608114172016,"results":"102","hashOfConfig":"58"},{"size":1192,"mtime":1608114171973,"results":"103","hashOfConfig":"58"},{"size":930,"mtime":1608114171988,"results":"104","hashOfConfig":"58"},{"size":1250,"mtime":1608114172071,"results":"105","hashOfConfig":"58"},{"size":780,"mtime":1608200063180,"results":"106","hashOfConfig":"58"},{"size":749,"mtime":1608114172530,"results":"107","hashOfConfig":"58"},{"size":1194,"mtime":1608114172422,"results":"108","hashOfConfig":"58"},{"size":2056,"mtime":1608114170849,"results":"109","hashOfConfig":"58"},{"size":268,"mtime":1608114170858,"results":"110","hashOfConfig":"58"},{"size":176,"mtime":1608114170874,"results":"111","hashOfConfig":"58"},{"size":1360,"mtime":1608114172105,"results":"112","hashOfConfig":"58"},{"size":416,"mtime":1608114172150,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"884lrp",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"116"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"/Users/kitagawakeita/testProject/shift-app/src/index.js",[],["233","234"],"/Users/kitagawakeita/testProject/shift-app/src/reportWebVitals.js",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Home.jsx",["235"],"import React, { useState } from \"react\";\nimport {useSelector} from 'react-redux';\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { getUserName } from \"../reducks/users/selectors\";\nimport { getGroupName, getShiftList } from \"../reducks/groups/selectors\";\n\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\n\nconst Home = () => {\n  const [value, onChange] = useState(new Date());\n  const selector = useSelector(state => state)\n  const username = getUserName(selector);\n  const groupName = getGroupName(selector);\n  // const shiftList = getShiftList(selector);\n  // console.log(shiftList)\n\n  const sun = d.getDay() === 0 ? 7 : d.getDay();\n  const s = d.getDate() + (14 - sun + 1);\n  const firstDate = new Date(y, m - 1, s);\n  const finishDate = new Date(y, m - 1, s + 6);\n  const deadline = new Date(y, m - 1, s - 7 - 1);\n\n  const startDate = firstDate.getMonth() + 1 + \"/\" + firstDate.getDate();\n  const endDate = finishDate.getMonth() + 1 + \"/\" + finishDate.getDate();\n  const deadlineDate = deadline.getMonth() + 1 + \"/\" + deadline.getDate();\n  const maxDate = new Date(y, m + 2, 1);\n\n  return (\n    <div className=\"main-container\">\n      <h2 className=\"main-title\">Home</h2>\n      <div className=\"calendar-container\">\n        <Calendar\n          value={value}\n          onChange={onChange}\n          locale=\"ja-JP\"\n          onClickDay={() => console.log(value.getDate())}\n          prev2AriaLabel={null}\n          minDate={d}\n          maxDate={maxDate}\n          next2Label={null}\n          prev2Label={null}\n        />\n      </div>\n\n      <div className=\"midium-space\" />\n\n      <div className=\"text-area\">\n        <h3>・名前　　　:　{username}</h3>\n        <h3>・グループ　:　{groupName}</h3>\n        <h3>\n          ・シフト範囲: 　{startDate}〜{endDate}\n        </h3>\n        <h3>・締め切り　: 　{deadlineDate}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/kitagawakeita/testProject/shift-app/src/footer/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/footer/Footer.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/header/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/header/Header.jsx",["236"],"import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\nimport { getGroupIcon, getGroupName, getGroupId } from \"../reducks/groups/selectors\";\nimport { getIsSignedIn } from \"../reducks/users/selectors\";\nimport { ImagePreview } from \"../components\";\nimport { push } from \"connected-react-router\";\n\nconst useStyles = makeStyles({\n  iconBox: {\n    margin: 0,\n  },\n  iconText: {\n    margin: \"-16px 0 0 0\",\n    fontSize: 8,\n  },\n  headTitle: {\n    margin: \"0 10px 0 auto\",\n    color: blueGrey[50],\n    fontWeight: \"bold\",\n  },\n  topTitle: {\n    margin: \"0 10px 0 auto\",\n    cursor: \"pointer\",\n    color: blueGrey[50],\n  },\n  root: {\n    background: blueGrey[400],\n    border: \"solid 1px #607d8b\",\n    padding: 0,\n    width: \"100%\",\n    margin: 0,\n    top: 0,\n    bottom: \"auto\",\n  },\n});\n\nconst Header = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state);\n\n  const groupName = getGroupName(selector);\n  const isSignedIn = getIsSignedIn(selector);\n  const groupIcon = getGroupIcon(selector);\n  const groupId = getGroupId(selector)\n\n  return (\n    <AppBar position=\"fixed\" className={classes.root}>\n      <Toolbar>\n        <div>main title</div>\n        {groupId !== \"\" ? (\n          <>\n            <Typography variant=\"h6\" className={classes.headTitle}>\n              {groupName}\n            </Typography>\n            {groupIcon !== \"\" && <ImagePreview path={groupIcon.path} />}\n          </>\n        ) : (\n          window.location.pathname !== \"/top\" && (\n            <Typography\n              className={classes.topTitle}\n              onClick={() => dispatch(push(\"/top\"))}\n            >\n              Top-Page\n            </Typography>\n          )\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","/Users/kitagawakeita/testProject/shift-app/src/templates/RegistShift.jsx",["237"],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/PrimaryButton.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TimeSelect.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ToggleShift.jsx",["238"],"/Users/kitagawakeita/testProject/shift-app/src/templates/ManagementPage.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/store/store.js",[],"/Users/kitagawakeita/testProject/shift-app/src/App.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/Router.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/components/ShiftTable.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Members.jsx",["239"],"import React from \"react\";\nimport { Divider } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { UsersList } from \"../components/UIkit\";\nimport { getMemberList, getShiftList } from \"../reducks/groups/selectors\";\n\nconst getName = (arr, newArr) => {\n  arr.map((value) => {\n    return newArr.push(value.name);\n  });\n};\nconst getManage = (arr, newArr) => {\n  arr.map((value) => {\n    if (value.manage) {\n      return newArr.push(value.name);\n    }\n  });\n};\n\nconst Members = () => {\n  const selector = useSelector((state) => state);\n\n  const memberList = getMemberList(selector);\n  const shiftList = getShiftList(selector);\n\n  const member = [];\n  const shift = [];\n  const manager = [];\n\n  getName(memberList, member);\n  getName(shiftList, shift);\n  getManage(memberList, manager);\n\n  const handInShift = [...new Set(member)].filter((value) =>\n    shift.includes(value)\n  );\n\n  const notHandInShift = [...member, ...shift].filter(\n    (value) =>\n      (!member.includes(value) || !shift.includes(value)) &&\n      !manager.includes(value)\n  );\n\n  return (\n    <div className=\"main-container\">\n      <h3 className=\"sub-label\">メンバー: {member.length}人</h3>\n      <UsersList memberList={manager} title={\"管理者\"} />\n      <UsersList memberList={handInShift} title={\"提出者\"} />\n      <Divider />\n      <UsersList memberList={notHandInShift} title={\"未提出者\"} />\n    </div>\n  );\n};\n\nexport default Members;\n","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/UsersList.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/SecondButton.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/reducers.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/actions.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/store/initialState.js",[],"/Users/kitagawakeita/testProject/shift-app/src/serviceWorker.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/selectors.js",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TextInput.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/CreateGroupPage.jsx",["240"],"import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Divider } from \"@material-ui/core\";\nimport { TextInput, PrimaryButton } from \"../components/UIkit/index\";\nimport { createGroup } from \"../reducks/groups/operations\";\nimport { getUserName, getUserId } from \"../reducks/users/selectors\";\nimport {push} from 'connected-react-router'\n\nconst CreateGroupPage = () => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state);\n\n  const username = getUserName(selector);\n  const uid = getUserId(selector);\n\n  const [groupName, setGroupName] = useState(\"\"),\n    [groupId, setGroupId] = useState(\"\"),\n    [groupPassword, setGroupPassword] = useState(\"\");\n\n  const inputGroupName = useCallback(\n    (event) => {\n      setGroupName(event.target.value);\n    },\n    [setGroupName]\n  );\n  const inputGroupId = useCallback(\n    (event) => {\n      setGroupId(event.target.value);\n    },\n    [setGroupId]\n  );\n  const inputGroupPassword = useCallback(\n    (event) => {\n      setGroupPassword(event.target.value);\n    },\n    [setGroupPassword]\n  );\n\n  return (\n    <div className=\"main-container\">\n      <h2>グループ作成</h2>\n      <TextInput\n        label={\"グループ名\"}\n        type={\"text\"}\n        fullWidth={true}\n        value={groupName}\n        onChange={inputGroupName}\n      />\n      <TextInput\n        label={\"グループID\"}\n        type={\"text\"}\n        fullWidth={true}\n        value={groupId}\n        onChange={inputGroupId}\n      />\n      <TextInput\n        label={\"管理者パスワード\"}\n        type={\"password\"}\n        fullWidth={true}\n        value={groupPassword}\n        onChange={inputGroupPassword}\n      />\n      <PrimaryButton\n        onClick={() =>\n          dispatch(\n            createGroup(groupName, groupId, groupPassword, username, uid)\n          )\n        }\n        label={\"登録\"}\n        fullWidth={true}\n        width={\"70%\"}\n      />\n      <div className=\"w-border\" />\n      <PrimaryButton label={\"グループに参加\"} width={\"50%\"} fullWidth={true} onClick={() => dispatch(push(\"/enter\"))} />\n    </div>\n  );\n};\n\nexport default CreateGroupPage;\n","/Users/kitagawakeita/testProject/shift-app/src/templates/SignIn.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/ShiftList.jsx",["241"],"/Users/kitagawakeita/testProject/shift-app/src/templates/SignUp.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/reducers.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/actions.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/operations.js",["242","243"],"import { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { fetchShiftsListAction, groupInAction, groupOutAction } from \"../groups/actions\";\nimport { saveGroupId, deleteGroupId, signOut } from \"../users/operations\";\nimport { push } from \"connected-react-router\";\nimport { SignalCellularOff } from \"@material-ui/icons\";\n\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\nconst sun = d.getDay() === 0 ? 7 : d.getDay();\nconst s = d.getDate() + (14 - sun + 1);\nconst firstDate = new Date(y, m - 1, s);\nconst prevFirstDate = new Date(y, m - 1, s - 7);\nconst dateId = `${firstDate.getFullYear()}${firstDate.getMonth()}${firstDate.getDate()}`;\nconst prevDateId = `${prevFirstDate.getFullYear()}${prevFirstDate.getMonth()}${prevFirstDate.getDate()}`;\n\nexport const saveGroupIcon = (images, groupId, password) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).get();\n    const data = snapshot.data();\n    if (data.groupPassword !== password) {\n      alert(\"パスワードが違います\");\n      return false;\n    }\n\n    const updateData = {\n      groupIcon: images,\n    };\n\n    db.collection(\"groups\")\n      .doc(groupId)\n      .set(updateData, { merge: true })\n      .then(() => {\n        dispatch(\n          groupInAction({\n            groupId: groupId,\n            groupPassword: data.groupPassword,\n            groupName: data.groupName,\n            memberList: data.memberList,\n            groupIcon: images,\n          })\n        );\n        alert(\"アイコンを変更しました\");\n      });\n  };\n};\n\nexport const createGroup = (\n  groupName,\n  groupId,\n  groupPassword,\n  username,\n  uid\n) => {\n  return async (dispatch) => {\n    if (username === \"\" || uid === \"\") {\n      alert(\"アカウントが必要です\");\n      dispatch(push(\"/signup\"));\n      return false;\n    }\n    if (groupId === \"\" || groupPassword === \"\") {\n      alert (\"必須項目が未入力です。\")\n      return false;\n    }\n    if (db.collection(\"groups\").doc(groupId).exists) {\n      alert (\"IDが既に存在しています。別のIDを選択してください。\")\n      return false;\n    }\n\n    const timestamp = FirebaseTimestamp.now();\n    const memberList = {\n      name: username,\n      id: uid,\n      manage: true,\n    };\n\n    const initializeDate = {\n      groupName: groupName,\n      groupId: groupId,\n      groupPassword: groupPassword,\n      created_at: timestamp,\n      updated_at: timestamp,\n      memberList: [memberList],\n      groupIcon: \"\",\n    };\n\n    dispatch(\n      groupInAction({\n        groupId: groupId,\n        groupPassword: groupPassword,\n        groupName: groupName,\n        memberList: [memberList],\n        groupIcon: \"\",\n      })\n    );\n\n    db.collection(\"groups\")\n      .doc(groupId)\n      .set(initializeDate)\n      .then(() => {\n        dispatch(saveGroupId(groupId, uid));\n        dispatch(push(\"/\"));\n      });\n  };\n};\n\nexport const deleteShift = (groupId, username) => {\n  return async (dispatch) => {\n    const snapshot = await db\n      .collection(\"groups\")\n      .doc(groupId)\n      .collection(\"shiftsList\")\n      .doc(dateId)\n      .get();\n    const data = snapshot.data();\n    const shiftList = data.shiftList;\n    const upShift = [];\n\n    shiftList.map((value) => {\n      if (value.name === username) {\n        return false;\n      }\n      return upShift.push(value);\n    });\n    const updateData = {\n      shiftList: upShift,\n    };\n    db.collection(\"groups\")\n      .doc(groupId)\n      .collection(\"shiftsList\")\n      .doc(dateId)\n      .set(updateData, { merge: true })\n      .then(() => {\n        // dispatch(\n        //   fetchShiftsListAction({\n        //     shiftList: upShift,\n        //     prevShiftList: data.prevShiftList,\n        //   })\n        // );\n        console.log(\"pp\")\n      });\n  };\n};\n\nexport const exitGroup = (uid, groupId, username) => {\n  return async (dispatch) => {\n    if (!window.confirm(\"このグループを退会します。本当によろしいですか？(退会すると自動でログアウトされます）\")) {\n      return false;\n    }\n    const timestamp = FirebaseTimestamp.now();\n    const snapshot = await db.collection(\"groups\").doc(groupId).get();\n\n    const data = snapshot.data();\n    const memberList = data.memberList;\n\n    const updateList = [];\n    memberList.map((value) => {\n      if (value.name === username && value.id === uid) {\n        return false;\n      }\n      return updateList.push(value);\n    });\n    const updateData = {\n      memberList: updateList,\n      updated_at: timestamp,\n    };\n    db.collection(\"groups\")\n    .doc(groupId)\n    .set(updateData, { merge: true })\n    .then(() => {\n      dispatch(groupOutAction());\n      dispatch(deleteShift(groupId, username));\n      dispatch(deleteGroupId(uid, groupId));\n      \n      });\n  };\n};\n\nexport const enterGroup = (groupname, groupId, username, uid) => {\n  return async (dispatch) => {\n    const id = String(groupId);\n    const snapshot = await db.collection(\"groups\").doc(id).get();\n\n    if (!snapshot.exists) {\n      alert(\"グループが存在しません\");\n      return false;\n    }\n    const data = snapshot.data();\n    if (data.groupName !== groupname) {\n      alert(\"グループ名とIDが一致しません\");\n      return false;\n    }\n    const memberList = data.memberList;\n\n    const newMember = {\n      name: username,\n      id: uid,\n      manage: false,\n    };\n    memberList.push(newMember);\n\n    const newData = {\n      memberList: memberList,\n    };\n\n    dispatch(\n      groupInAction({\n        groupId: data.groupId,\n        groupPassword: data.groupPassword,\n        groupName: data.groupName,\n        memberList: memberList,\n        groupIcon: data.groupIcon,\n      })\n    );\n\n    dispatch(fetchShifts(groupId, dateId));\n\n    db.collection(\"groups\")\n      .doc(id)\n      .set(newData, { merge: true })\n      .then(() => {\n        dispatch(saveGroupId(groupId, uid, username));\n      });\n  };\n};\n\nexport const fetchShifts = (groupId, dateId) => {\n  const timestamp = FirebaseTimestamp.now();\n  console.log(\"aa\");\n  if (groupId === \"\") {\n    return false;\n  }\n  return async (dispatch) => {\n    const snapshot = await db\n      .collection(\"groups\")\n      .doc(groupId)\n      .collection(\"shiftsList\")\n      .doc(dateId)\n      .get();\n    if (!snapshot.exists) {\n      const prevSnapshot = await db\n        .collection(\"groups\")\n        .doc(groupId)\n        .collection(\"shiftsList\")\n        .doc(prevDateId)\n        .get();\n      const prevShiftData = [];\n      if (prevSnapshot.exists) {\n        const prevData = prevSnapshot.data();\n        prevData.shiftList.forEach((value) => {\n          prevShiftData.push(value);\n        });\n      }\n      console.log(prevShiftData);\n\n      const data = {\n        shiftList: [],\n        prevShiftList: prevShiftData,\n        created_at: timestamp,\n        updated_at: timestamp,\n      };\n\n      db.collection(\"groups\")\n        .doc(groupId)\n        .collection(\"shiftsList\")\n        .doc(dateId)\n        .set(data)\n        .then(() => {\n          console.log(\"create-table\");\n          dispatch(\n            fetchShiftsListAction({\n              shiftList: [],\n              prevShiftList: prevShiftData,\n            })\n          );\n        });\n    } else {\n      const data = snapshot.data();\n\n      dispatch(\n        fetchShiftsListAction({\n          shiftList: data.shiftList,\n          prevShiftList: data.prevShiftList,\n        })\n      );\n    }\n  };\n};\n\n// export const changeShiftName = (groupId, username, uid) => {\n//   // const timestamp = FirebaseTimestamp.now();\n//   return async (dispatch) => {\n//     const snapshot = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).get()\n//     const data = snapshot.data();\n//     // const shiftList = data.shiftList;\n//     // const prevShiftList = data.prevShiftList;\n//     // console.log(data)\n//     // if (shiftList.length > 0) {\n//     //   shiftList.forEach(value => {\n//     //     if (value.id === uid) {\n//     //       value.name = username;\n//     //     }\n//     //   })\n//     // }\n//     // console.log(prevShiftList)\n//     // if (prevShiftList.length > 0) {\n//     //   prevShiftList.forEach(value => {\n//     //     if (value.id === uid) {\n//     //       value.name = username\n//     //     }\n//     //   })\n//     // }\n//     const updateData = {\n//       shiftList: data.shiftList,\n//       prevShiftList: data.prevShiftList\n//     }\n\n//     dispatch(fetchShiftsListAction(updateData))\n\n//     const doc = await db.collection(\"groupId\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(updateData, {merge: true})\n//         console.log(\"tesutook\");\n//   }\n// }\n\nexport const saveShifts = (groupId, shift, name, uid) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    const doc = await db\n      .collection(\"groups\")\n      .doc(groupId)\n      .collection(\"shiftsList\")\n      .doc(dateId)\n      .get();\n    const newData = {\n      name: name,\n      list: shift,\n      id: uid,\n    };\n    console.log(newData);\n\n    if (doc.exists) {\n      const data = doc.data();\n      const shiftList = data.shiftList;\n      const arr = [];\n      shiftList.map((value) => {\n        return arr.push(value.name);\n      });\n      if (arr.includes(newData.name)) {\n        alert(\"既に登録されています。\");\n        return false;\n      }\n\n      shiftList.push(newData);\n\n      const updateData = {\n        shiftList: shiftList,\n        updated_at: timestamp,\n      };\n\n      db.collection(\"groups\")\n        .doc(groupId)\n        .collection(\"shiftsList\")\n        .doc(dateId)\n        .set(updateData, { merge: true })\n        .then(() => {\n          dispatch(\n            fetchShiftsListAction({\n              shiftList: shiftList,\n              prevShiftList: data.prevShiftList,\n            })\n          );\n          alert(\"登録しました\");\n        });\n    } else {\n      const prevSnapshot = await db\n        .collection(\"groups\")\n        .doc(groupId)\n        .collection(\"shiftsList\")\n        .doc(prevDateId)\n        .get();\n      const prevShiftData = [];\n      if (prevSnapshot.exists) {\n        const prevData = prevSnapshot.data();\n        prevShiftData.push(prevData);\n      }\n\n      const initializeDate = {\n        shiftList: [newData],\n        created_at: timestamp,\n        prevShiftList: prevShiftData,\n        updated_at: timestamp,\n      };\n\n      db.collection(\"groups\")\n        .doc(groupId)\n        .collection(\"shiftsList\")\n        .doc(dateId)\n        .set(initializeDate)\n        .then(() => {\n          console.log(\"create\");\n          dispatch(\n            fetchShiftsListAction({\n              prevShiftList: prevShiftData,\n              shiftList: [newData],\n            })\n          );\n          alert(\"登録しました\");\n        });\n    }\n  };\n};\nexport const changeShiftName = (groupId, name, uid) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    const doc = await db\n      .collection(\"groups\")\n      .doc(groupId)\n      .collection(\"shiftsList\")\n      .doc(dateId)\n      .get();\n\n    const data = doc.data();\n\n    const shiftList = data.shiftList;\n    const prevShiftList = data.prevShiftList;\n\n    if (shiftList.length > 0) {\n      shiftList.forEach((value) => {\n        if (value.id === uid) {\n          value.name = name;\n        }\n      });\n    }\n\n    if (prevShiftList.length > 0) {\n      prevShiftList.forEach((value) => {\n        if (value.id === uid) {\n          value.name = name;\n        }\n      });\n    }\n\n    const updateData = {\n      shiftList: shiftList,\n      updated_at: timestamp,\n      prevShiftList: prevShiftList,\n    };\n\n    db.collection(\"groups\")\n      .doc(groupId)\n      .collection(\"shiftsList\")\n      .doc(dateId)\n      .set(updateData, { merge: true })\n      .then(() => {\n        dispatch(\n          fetchShiftsListAction({\n            shiftList: shiftList,\n            prevShiftList: prevShiftList,\n          })\n        );\n        alert(\"変更しました\");\n      });\n  };\n};\n\nexport const registManage = (managePassword, uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).get();\n    const data = snapshot.data();\n    if (data.groupPassword !== managePassword) {\n      alert(\"管理者パスワードが違います\");\n      return false;\n    }\n\n    const memberList = data.memberList;\n    memberList.forEach((value) => {\n      if (value.id === uid) {\n        value.manage = true;\n      }\n    });\n    const updateData = {\n      memberList: memberList,\n    };\n    dispatch(\n      groupInAction({\n        groupId: data.groupId,\n        groupPassword: data.groupPassword,\n        groupName: data.groupName,\n        memberList: memberList,\n        groupIcon: data.groupIcon,\n      })\n    );\n    db.collection(\"groups\")\n      .doc(groupId)\n      .set(updateData, { merge: true })\n      .then(() => {\n        alert(\"管理者登録しました\");\n      });\n  };\n};\n\nexport const changeMemberName = (name, uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).get();\n    const data = snapshot.data();\n\n    const memberList = data.memberList;\n    memberList.forEach((value) => {\n      if (value.id === uid) {\n        value.name = name;\n      }\n    });\n    const updateData = {\n      memberList: memberList,\n      groupName: \"tesuto\",\n    };\n    console.log(memberList);\n\n    dispatch(\n      groupInAction({\n        groupId: data.groupId,\n        groupPassword: data.groupPassword,\n        groupName: data.groupName,\n        memberList: memberList,\n        groupIcon: data.groupIcon,\n      })\n    );\n\n    db.collection(\"groups\")\n      .doc(groupId)\n      .set(updateData, { merge: true })\n      .then(() => {\n        dispatch(changeShiftName(groupId, name, uid));\n      });\n  };\n};\n\nexport const changeGroupName = (groupId, newGroupName, password) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    const snapshot = await db.collection(\"groups\").doc(groupId).get();\n    const data = snapshot.data();\n\n    if (data.groupPassword !== password) {\n      alert(\"パスワードが違います\");\n      return false;\n    }\n\n    const updateData = {\n      groupName: newGroupName,\n      updated_at: timestamp,\n    };\n\n    dispatch(\n      groupInAction({\n        groupId: data.groupId,\n        groupPassword: data.groupPassword,\n        groupName: newGroupName,\n        memberList: data.memberList,\n        groupIcon: data.groupIcon,\n      })\n    );\n\n    db.collection(\"groups\")\n      .doc(groupId)\n      .set(updateData, { merge: true })\n      .then(() => {\n        console.log(\"kokokm\");\n      });\n  };\n};\n\n// export const changeGroupName = (groupId, groupName, managePassword) => {\n//   // const timestamp = FirebaseTimestamp.now()\n//   return async (dispatch) => {\n//     const snapshot = await db.collection(\"groupId\").doc(groupId).get();\n//     const data = snapshot.data()\n//     if (data.groupPassword !== managePassword) {\n//       alert (\"管理者パスワードが違います\");\n//       return false;\n//     }\n//     const updateData = {\n//       groupName: groupName,\n//       // updated_at: timestamp\n//     }\n//     dispatch(groupInAction({\n//       groupId: data.groupId,\n//       groupPassword: data.groupPassword,\n//       groupName: groupName,\n//       memberList: data.memberList,\n//     }))\n\n//     const doc = await db.collection(\"groups\").doc(groupId).set(updateData, {merge: true})\n//       // .then(() => {\n//         alert (\"変更しました\")\n//       // })\n//   }\n// }\n\nexport const groupIn = (groupId) => {\n  const id = String(groupId);\n  return async (dispatch) => {\n    const snapshots = await db\n      .collection(\"groups\")\n      .where(\"groupId\", \"==\", id)\n      .get();\n    snapshots.forEach((doc) => {\n      const data = doc.data();\n      const memberList = data.memberList;\n\n      dispatch(\n        groupInAction({\n          groupId: data.groupId,\n          groupPassword: data.groupPassword,\n          groupName: data.groupName,\n          memberList: memberList,\n          groupIcon: data.groupIcon,\n        })\n      );\n    });\n  };\n};\n","/Users/kitagawakeita/testProject/shift-app/src/firebase/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/firebase/config.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/operations.js",["244","245"],"import { auth, db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { signInAction, signOutAction } from \"./actions\";\nimport { groupIn } from \"../groups/operations\";\nimport { fetchShifts } from \"../groups/operations\";\nimport { changeMemberName } from \"../groups/operations\";\nimport {groupOutAction} from \"../groups/actions\";\n\nconst usersRef = db.collection(\"users\");\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\n\nexport const deleteGroupId = (uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"users\").doc(uid).get();\n    const data = snapshot.data();\n\n    if (data.groupId !== groupId) {\n      return false;\n    }\n\n    const updateData = {\n      groupId: \"\",\n    };\n\n    const setData = await db.collection(\"users\")\n      .doc(uid)\n      .set(updateData, { merge: true })\n\n      auth.signOut().then(() => {\n        dispatch(signOutAction());\n        dispatch(push(\"/top\"));\n      });\n  };\n};\n\nexport const listenAuthState = () => {\n  const sun = d.getDay() === 0 ? 7 : d.getDay();\n  const s = d.getDate() + (14 - sun + 1);\n  const firstDate = new Date(y, m - 1, s);\n  const dateId = `${firstDate.getFullYear()}${firstDate.getMonth()}${firstDate.getDate()}`;\n  return async (dispatch) => {\n    return auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        const uid = user.uid;\n\n        const doc = await usersRef.doc(uid).get();\n        const data = doc.data();\n        console.log(data)\n        const groupId = data.groupId;\n\n        dispatch(\n          signInAction({\n            isSignIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username,\n            groupId: groupId,\n          })\n        );\n        if (groupId !== \"\") {\n          dispatch(fetchShifts(groupId, dateId));\n          dispatch(groupIn(groupId));\n        } else {\n          dispatch(push(\"/enter\"))\n        }\n      } else {\n        dispatch(push(\"/signin\"));\n      }\n    });\n  };\n};\n\nexport const changeName = (name, uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"users\").doc(uid).get();\n    const data = snapshot.data();\n    const updateData = {\n      username: name,\n    };\n    dispatch(\n      signInAction({\n        isSignIn: true,\n        role: data.role,\n        uid: uid,\n        username: name,\n        groupId: data.groupId,\n      })\n    );\n    db.collection(\"users\")\n      .doc(uid)\n      .set(updateData, { merge: true })\n      .then(() => {\n        dispatch(changeMemberName(name, uid, groupId));\n      });\n  };\n};\n\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    auth.signInWithEmailAndPassword(email, password).then((result) => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n\n        usersRef\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            dispatch(\n              signInAction({\n                isSignIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n                updated_at: timestamp,\n                groupId: data.groupId,\n              })\n            );\n\n            if (data.groupId === \"\") {\n              dispatch(push(\"/enter\"));\n            } else {\n              dispatch(push(\"/\"));\n            }\n          })\n          .catch(() => {\n            alert(\"メールアドレスとパスワードが一致しません\");\n            console.log(Error);\n          });\n      }\n    });\n  };\n};\n\nexport const resetPassword = (email) => {\n  return async (dispatch) => {\n    // if (email === \"\") {\n    //   alert(\"必須項目が未入力です\");\n    //   return false;\n    // } else if (!isValidEmailFormat(email)) {\n    //   alert(\"メールアドレスの形式が不正です。\");\n    //   return false;\n    // }\n    auth\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        alert(\n          \"入力されたアドレスにパスワードリセット用のメールをお送りしました。\"\n        );\n        dispatch(push(\"/signin\"));\n      })\n      .catch(() => {\n        alert(\"パスワードリセットに失敗しました。通信状況をご確認ください\");\n      });\n  };\n};\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    if (\n      username === \"\" ||\n      email === \"\" ||\n      password === \"\" ||\n      confirmPassword === \"\"\n    ) {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    // if (!isValidEmailFormat(email)) {\n    //   alert(\"メールアドレスの形式が不正です。もう1度お試しください。\");\n    //   return false;\n    // }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then(async (result) => {\n        const user = result.user;\n\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n            groupId: \"\",\n          };\n\n          const setData = await usersRef\n            .doc(uid)\n            .set(userInitialData)\n\n          dispatch(push(\"/enter\"));\n        }\n      });\n  };\n};\n\nexport const saveGroupId = (groupId, uid, username) => {\n  // const timestamp = FirebaseTimestamp.now();\n  return async (dispatch) => {\n    const data = {\n      groupId: groupId,\n    };\n\n    dispatch(\n      signInAction({\n        isSignIn: true,\n        role: data.role,\n        uid: uid,\n        username: username,\n        groupId: groupId,\n      })\n    );\n    db.collection(\"users\")\n      .doc(uid)\n      .set(data, { merge: true })\n      .then(() => {\n        alert(\"グループに加入しました\");\n        dispatch(push(\"/\"));\n      });\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    auth.signOut().then(() => {\n      dispatch(signOutAction());\n      dispatch(groupOutAction());\n      dispatch(push(\"/top\"));\n    });\n  };\n};\n","/Users/kitagawakeita/testProject/shift-app/src/templates/EnterGroupPage.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ConfirmDialog.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/selectors.js",[],"/Users/kitagawakeita/testProject/shift-app/src/Auth.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/ToggleContent.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeGroupName.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeName.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangePassword.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/RegistManage.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ExitGroup.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Top.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Reset.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/ImageArea.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/ImagePreview.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/NoImage.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/SaveGroupIcon.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/SignOut.jsx",[],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":6,"column":24,"nodeType":"252","messageId":"253","endLine":6,"endColumn":36},{"ruleId":"250","severity":1,"message":"254","line":48,"column":9,"nodeType":"252","messageId":"253","endLine":48,"endColumn":19},{"ruleId":"250","severity":1,"message":"255","line":22,"column":9,"nodeType":"252","messageId":"253","endLine":22,"endColumn":18},{"ruleId":"256","severity":1,"message":"257","line":56,"column":6,"nodeType":"258","endLine":56,"endColumn":24,"suggestions":"259"},{"ruleId":"260","severity":1,"message":"261","line":13,"column":19,"nodeType":"262","messageId":"263","endLine":13,"endColumn":21},{"ruleId":"250","severity":1,"message":"264","line":3,"column":10,"nodeType":"252","messageId":"253","endLine":3,"endColumn":17},{"ruleId":"250","severity":1,"message":"265","line":1,"column":10,"nodeType":"252","messageId":"253","endLine":1,"endColumn":37},{"ruleId":"250","severity":1,"message":"266","line":3,"column":38,"nodeType":"252","messageId":"253","endLine":3,"endColumn":45},{"ruleId":"250","severity":1,"message":"267","line":5,"column":10,"nodeType":"252","messageId":"253","endLine":5,"endColumn":27},{"ruleId":"250","severity":1,"message":"268","line":27,"column":11,"nodeType":"252","messageId":"253","endLine":27,"endColumn":18},{"ruleId":"250","severity":1,"message":"268","line":205,"column":17,"nodeType":"252","messageId":"253","endLine":205,"endColumn":24},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"no-unused-vars","'getShiftList' is defined but never used.","Identifier","unusedVar","'isSignedIn' is assigned a value but never used.","'groupName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'timeLange'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["271"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Divider' is defined but never used.","'CollectionsBookmarkOutlined' is defined but never used.","'signOut' is defined but never used.","'SignalCellularOff' is defined but never used.","'setData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"272","fix":"273"},"Update the dependencies array to be: [start, end, open, timeLange, props]",{"range":"274","text":"275"},[1431,1449],"[start, end, open, timeLange, props]"]