[{"/Users/kitagawakeita/testProject/shift-app/src/index.js":"1","/Users/kitagawakeita/testProject/shift-app/src/reportWebVitals.js":"2","/Users/kitagawakeita/testProject/shift-app/src/templates/index.js":"3","/Users/kitagawakeita/testProject/shift-app/src/templates/Home.jsx":"4","/Users/kitagawakeita/testProject/shift-app/src/footer/index.js":"5","/Users/kitagawakeita/testProject/shift-app/src/footer/Footer.jsx":"6","/Users/kitagawakeita/testProject/shift-app/src/header/index.js":"7","/Users/kitagawakeita/testProject/shift-app/src/header/Header.jsx":"8","/Users/kitagawakeita/testProject/shift-app/src/templates/RegistShift.jsx":"9","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/index.js":"10","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/PrimaryButton.jsx":"11","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TimeSelect.jsx":"12","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ToggleShift.jsx":"13","/Users/kitagawakeita/testProject/shift-app/src/templates/ManagementPage.jsx":"14","/Users/kitagawakeita/testProject/shift-app/src/reducks/store/store.js":"15","/Users/kitagawakeita/testProject/shift-app/src/templates/MyInfomation.jsx":"16","/Users/kitagawakeita/testProject/shift-app/src/App.jsx":"17","/Users/kitagawakeita/testProject/shift-app/src/Router.jsx":"18","/Users/kitagawakeita/testProject/shift-app/src/components/index.js":"19","/Users/kitagawakeita/testProject/shift-app/src/components/ShiftTable.jsx":"20","/Users/kitagawakeita/testProject/shift-app/src/templates/Members.jsx":"21","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/UsersList.jsx":"22","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/SecondButton.jsx":"23","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TextArea.jsx":"24","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/reducers.js":"25","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/actions.js":"26","/Users/kitagawakeita/testProject/shift-app/src/reducks/store/initialState.js":"27","/Users/kitagawakeita/testProject/shift-app/src/serviceWorker.js":"28","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/selectors.js":"29","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TextInput.jsx":"30","/Users/kitagawakeita/testProject/shift-app/src/templates/CreateGroupPage.jsx":"31","/Users/kitagawakeita/testProject/shift-app/src/templates/SignIn.jsx":"32","/Users/kitagawakeita/testProject/shift-app/src/templates/ShiftList.jsx":"33","/Users/kitagawakeita/testProject/shift-app/src/templates/SignUp.jsx":"34","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/reducers.js":"35","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/actions.js":"36","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/operations.js":"37","/Users/kitagawakeita/testProject/shift-app/src/firebase/index.js":"38","/Users/kitagawakeita/testProject/shift-app/src/firebase/config.js":"39","/Users/kitagawakeita/testProject/shift-app/src/reducks/users/operations.js":"40","/Users/kitagawakeita/testProject/shift-app/src/templates/EnterGroupPage.jsx":"41","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ConfirmDialog.jsx":"42","/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/selectors.js":"43","/Users/kitagawakeita/testProject/shift-app/src/Auth.jsx":"44","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/SelectBox.jsx":"45","/Users/kitagawakeita/testProject/shift-app/src/components/ToggleContent.jsx":"46","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeGroupName.jsx":"47","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/index.js":"48","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeName.jsx":"49","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangePassword.jsx":"50","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/RegistManage.jsx":"51","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ExitGroup.jsx":"52","/Users/kitagawakeita/testProject/shift-app/src/templates/Top.jsx":"53","/Users/kitagawakeita/testProject/shift-app/src/templates/Reset.jsx":"54"},{"size":848,"mtime":1607178650539,"results":"55","hashOfConfig":"56"},{"size":362,"mtime":1607083320949,"results":"57","hashOfConfig":"56"},{"size":594,"mtime":1608067615545,"results":"58","hashOfConfig":"56"},{"size":1590,"mtime":1607849963391,"results":"59","hashOfConfig":"56"},{"size":43,"mtime":1607087250057,"results":"60","hashOfConfig":"56"},{"size":2404,"mtime":1608037411921,"results":"61","hashOfConfig":"56"},{"size":43,"mtime":1607087765908,"results":"62","hashOfConfig":"56"},{"size":2100,"mtime":1608037401863,"results":"63","hashOfConfig":"56"},{"size":3254,"mtime":1607997646522,"results":"64","hashOfConfig":"56"},{"size":597,"mtime":1607811582286,"results":"65","hashOfConfig":"56"},{"size":836,"mtime":1608069126468,"results":"66","hashOfConfig":"56"},{"size":1521,"mtime":1607769083789,"results":"67","hashOfConfig":"56"},{"size":2255,"mtime":1607769618745,"results":"68","hashOfConfig":"56"},{"size":1151,"mtime":1607998833166,"results":"69","hashOfConfig":"56"},{"size":716,"mtime":1607845019793,"results":"70","hashOfConfig":"56"},{"size":179,"mtime":1607138015651,"results":"71","hashOfConfig":"56"},{"size":383,"mtime":1608037957970,"results":"72","hashOfConfig":"56"},{"size":1403,"mtime":1608067628314,"results":"73","hashOfConfig":"56"},{"size":110,"mtime":1607779611467,"results":"74","hashOfConfig":"56"},{"size":2768,"mtime":1608037694111,"results":"75","hashOfConfig":"56"},{"size":1379,"mtime":1608038696546,"results":"76","hashOfConfig":"56"},{"size":1230,"mtime":1608038713865,"results":"77","hashOfConfig":"56"},{"size":188,"mtime":1607769025634,"results":"78","hashOfConfig":"56"},{"size":166,"mtime":1607595305350,"results":"79","hashOfConfig":"56"},{"size":319,"mtime":1607179631924,"results":"80","hashOfConfig":"56"},{"size":518,"mtime":1607510143439,"results":"81","hashOfConfig":"56"},{"size":347,"mtime":1607892891262,"results":"82","hashOfConfig":"56"},{"size":5098,"mtime":1607178612762,"results":"83","hashOfConfig":"56"},{"size":448,"mtime":1607509664468,"results":"84","hashOfConfig":"56"},{"size":867,"mtime":1607769099168,"results":"85","hashOfConfig":"56"},{"size":1709,"mtime":1607769237274,"results":"86","hashOfConfig":"56"},{"size":1425,"mtime":1608069873154,"results":"87","hashOfConfig":"56"},{"size":1628,"mtime":1608038276339,"results":"88","hashOfConfig":"56"},{"size":1935,"mtime":1608068994450,"results":"89","hashOfConfig":"56"},{"size":872,"mtime":1607845028443,"results":"90","hashOfConfig":"56"},{"size":613,"mtime":1607892867058,"results":"91","hashOfConfig":"56"},{"size":14207,"mtime":1608001724905,"results":"92","hashOfConfig":"56"},{"size":459,"mtime":1607346771771,"results":"93","hashOfConfig":"56"},{"size":337,"mtime":1607389486406,"results":"94","hashOfConfig":"56"},{"size":6259,"mtime":1608068356177,"results":"95","hashOfConfig":"56"},{"size":1310,"mtime":1607769249416,"results":"96","hashOfConfig":"56"},{"size":2312,"mtime":1607768987660,"results":"97","hashOfConfig":"56"},{"size":723,"mtime":1607848057340,"results":"98","hashOfConfig":"56"},{"size":578,"mtime":1607769469263,"results":"99","hashOfConfig":"56"},{"size":1618,"mtime":1607769133346,"results":"100","hashOfConfig":"56"},{"size":806,"mtime":1607779594701,"results":"101","hashOfConfig":"56"},{"size":1546,"mtime":1607986648669,"results":"102","hashOfConfig":"56"},{"size":279,"mtime":1607998466074,"results":"103","hashOfConfig":"56"},{"size":1411,"mtime":1607986644136,"results":"104","hashOfConfig":"56"},{"size":836,"mtime":1607866307208,"results":"105","hashOfConfig":"56"},{"size":1150,"mtime":1607855866437,"results":"106","hashOfConfig":"56"},{"size":775,"mtime":1607998890249,"results":"107","hashOfConfig":"56"},{"size":740,"mtime":1608038015128,"results":"108","hashOfConfig":"56"},{"size":1051,"mtime":1608068892204,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"884lrp",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"112"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"112"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"112"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"112"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"112"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"112"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kitagawakeita/testProject/shift-app/src/index.js",[],["233","234"],"/Users/kitagawakeita/testProject/shift-app/src/reportWebVitals.js",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Home.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/footer/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/footer/Footer.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/header/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/header/Header.jsx",["235","236","237","238"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {signOut} from '../reducks/users/operations';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport blueGrey from '@material-ui/core/colors/blueGrey'\nimport {getGroupName} from '../reducks/groups/selectors';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { getIsSignedIn } from '../reducks/users/selectors';\n\nconst useStyles = makeStyles((theme) => ({\n  iconBox: {\n    margin: 0,\n  },\n  iconText: {\n    margin: \"-16px 0 0 0\",\n    fontSize: 8,\n  },\n  headTitle: {\n    margin: \"0 10px 0 auto\"\n  },\n  root: {\n    background: blueGrey[400],\n    padding: 0,\n    width: \"100%\",\n    margin: 0,\n    top: 0,\n    bottom: \"auto\",\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state)\n\n  const groupName = getGroupName(selector);\n  const isSignedIn = getIsSignedIn(selector);\n\n  return (\n      <AppBar position=\"fixed\" className={classes.root}>\n        <Toolbar>\n          <div>main title</div>\n          <Typography variant=\"h6\" className={classes.headTitle}>\n            {groupName}\n          </Typography>\n            {isSignedIn && (\n              \n              <div className={classes.iconBox}>\n        <IconButton className={classes.icon} onClick={() => dispatch(signOut())} color=\"inherit\">\n              <ExitToAppIcon />\n            </IconButton>\n            <p className={classes.iconText}>ログアウト</p>\n          </div>\n              )}\n        </Toolbar>\n      </AppBar>\n  );\n}\n\nexport default Header;","/Users/kitagawakeita/testProject/shift-app/src/templates/RegistShift.jsx",["239","240"],"import React, {useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport { PrimaryButton, ToggleShift, ConfirmDialog } from '../components/UIkit/index';\nimport {saveShifts} from '../reducks/groups/operations';\nimport { getUserName, getUserId } from '../reducks/users/selectors';\nimport {getGroupId, getGroupName} from '../reducks/groups/selectors';\n\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\n\nconst RegistShift = () => {\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state);\n\n  const groupId = getGroupId(selector);\n  const username= getUserName(selector);\n  const groupName = getGroupName(selector);\n\n  const [monday,setMonday] = useState(\"\");\n  const [tuesday, setTuesday] = useState(\"\");\n  const [wednesday, setWednesday] = useState(\"\");\n  const [thursday, setThursday] = useState(\"\");\n  const [friday, setFriday] = useState(\"\");\n  const [saturday, setSaturday] = useState(\"\");\n  const [sunday, setSunday] = useState(\"\");\n\n  const [open, setOpen] = React.useState(false);\n  const uid = getUserId(selector);\n  console.log(uid)\n  // const [emptyTime, setEmptyTime] = useState(true);\n\n  const sun = d.getDay() === 0 ? 7 : d.getDay();\n  const s = d.getDate() + (14 - sun + 1);\n  const firstDate = new Date(y, m - 1, s);\n  const finishDate = new Date(y, m - 1, s + 6);\n  \n  // const startDate = d.getDate() + ((14 - d.getDay() + 1));\n  // const firstDate = new Date(y, m - 1, startDate);\n  const dateId = `${firstDate.getFullYear()}${firstDate.getMonth()}${firstDate.getDate()}`;\n  const shiftWeek = [{func: setMonday, name: monday},{func: setTuesday, name: tuesday}, {func: setWednesday, name: wednesday}, {func: setThursday, name: thursday}, {func: setFriday, name: friday}, {func: setSaturday, name: saturday}, {func: setSunday, name: sunday}]\n  \n  const handleClickOpen = () => {\n    // if (!emptyTime) {\n    //   alert (\"空白があります\");\n    //   return false;\n    // }\n    setOpen(true);\n  };\n  \n  const handleClose = () => {\n    setOpen(false);\n  };\n  \n  const enterShift = () => {\n    const arr = []\n    shiftWeek.map(shift => {\n      arr.push(shift.name)\n    })\n    \n    dispatch(saveShifts(groupId, arr, username, uid));\n    setOpen(false);\n  }\n\n  for (var i = 0; i < 7; i++) {\n    const shiftDate = (firstDate.getDate());\n    const shiftDay = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"][firstDate.getDay()];\n    \n    firstDate.setDate(firstDate.getDate() + 1);\n  \n    shiftWeek[i].date = shiftDate\n    shiftWeek[i].day = shiftDay\n  }\n\n  return (\n    <div>\n      <h2>{groupName}</h2>\n      <div className=\"main-container sub-border\">\n        <div className=\"time-field_title\">シフト登録</div>\n        {shiftWeek.map((value, index) => {\n          return (\n            <ToggleShift timeLine={value.name} func={value.func} key={index} date={value.date} day={value.day}/>\n          )\n        })}\n      </div>\n      <div className=\"midium-space\" />\n      <PrimaryButton onClick={handleClickOpen} label={\"確認\"} fullWidth={true} width={\"50%\"}  />\n      <div>\n      <ConfirmDialog open={open} handleClose={handleClose} saveShift={enterShift} shiftWeek={shiftWeek} dateId={dateId}  />\n      </div>\n    </div>\n  )\n}\n\nexport default RegistShift;\n","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/PrimaryButton.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TimeSelect.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ToggleShift.jsx",["241"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {TimeSelect} from './index'\nimport LoopIcon from '@material-ui/icons/Loop';\nimport { IconButton } from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\n\nconst useStyles = makeStyles({\n  icon: {\n    width: \"15%\",\n    color: blueGrey[50],\n  }\n});\n\nconst ToggleShift = React.memo((props) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [start, setStart] = useState(\"\");\n  const [end, setEnd] = useState(\"\");\n\n  const timeArr = [...Array(15)].map((_, i ) => i + 9)\n  const timeLange = [];\n  timeArr.map(time => {\n    return timeLange.push(`${time}: 00`, `${time}: 30`);\n  })\n\n  const toggleOpen = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen])\n\n  const handleChangeStart = (event) => {\n    setStart(event.target.value);\n  }\n  const handleChangeEnd = (event) => {\n    setEnd(event.target.value);\n  }\n  \n  useEffect(() => {\n    if (!open) {\n        props.func(\"休み\")\n      } else {\n        if (start !== \"\" && end !== \"\" && timeLange.indexOf(start) > timeLange.indexOf(end)) {\n          alert (\"範囲に誤りがあります\")\n          setStart(\"\");\n          setEnd(\"\");\n        } else {\n          props.func(`${start}-${end}`)\n        }\n      }\n  }, [start, end, open])\n  \n  return (\n        <div className=\"d-flex f-between time-field\">\n          <p className=\"time-field_date\">{props.date}<span>(</span>{props.day}<span>)</span></p>\n          {open ? (\n            <div className=\"d-flex\">\n            <TimeSelect \n              label={\"start\"}\n              value={start} \n              handleChange={handleChangeStart}\n              arr={timeLange}\n            />\n            <p className=\"time-line\">ー</p>\n            <TimeSelect\n              label={\"end\"}\n              value={end}\n              handleChange={handleChangeEnd}\n              arr={timeLange}\n            />\n            </div>\n            ) : (\n            <p className=\"time-field_label\">休み</p>\n          )}\n          <IconButton onClick={toggleOpen} className={classes.icon} >\n            <LoopIcon />\n          </IconButton>\n        </div>\n  )\n})\n\nexport default ToggleShift\n","/Users/kitagawakeita/testProject/shift-app/src/templates/ManagementPage.jsx",["242","243","244","245","246","247","248"],"import React, {useCallback, useState} from 'react'\nimport {useDispatch} from 'react-redux';\nimport { PrimaryButton, TextInput } from '../components/UIkit';\nimport {ToggleContent} from '../components/index';\nimport {ChangeGroupName, ChangeName, ChangePassword, ExitGroup, RegistManage} from '../SettingPages/index';\nimport { Divider } from '@material-ui/core';\n\nconst ManagementPage = () => {\n  const changeName =  <ChangeName />\n\n  // const changePassword = <ChangePassword />\n\n  const registManagement = <RegistManage />\n  \n  const changeGroupName = <ChangeGroupName />\n\n  const exitGroup = <ExitGroup />\n\n\n  const contentArr = [\n    {name: \"名前の変更\", content: changeName},\n    {name: \"グループ名の変更\", content: changeGroupName},\n    {name: \"管理者登録\", content: registManagement},\n    {name: \"グループを退会\", content: exitGroup}\n  ]\n\nreturn (\n  <>\n    {contentArr.map((value, index) => {\n      return (\n        <div key={String(index)}>\n        <ToggleContent label={value.name} content={value.content} />\n        <div className=\"w-border\" />\n        </div>\n      )\n    })}\n  </>\n  )\n}\n\nexport default ManagementPage\n","/Users/kitagawakeita/testProject/shift-app/src/reducks/store/store.js",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/MyInfomation.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/App.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/Router.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/components/ShiftTable.jsx",["249"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport { blue } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 720,\n    maxWidth: 1000,\n    marginLeft: \"1%\",\n    border: \"solid 2px #fff\",\n    borderRadius: 10,\n  },\n  headCell: {\n    background: blueGrey[500],\n    border: \"solid 1px #fff\",\n    padding: \"12px 0px\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    fontSize: 16,\n    color: blueGrey[50],\n  },\n  bodyCell: {\n    background: blueGrey[300],\n    border: \"solid 1px #fff\",\n    padding: \"12px 0px\",\n    textAlign: \"center\",\n    color: \"#fff\",\n  },\n  bodyCell_name: {\n    border: \"solid 1px #fff\",\n    padding: \"12px 0px\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    background: blueGrey[300],\n  },\n  bodyCell_out: {\n    border: \"solid 1px #fff\",\n    padding: \"12px 0px\",\n    textAlign: \"center\",\n    color: \"#fff\",\n    background: blueGrey[300],\n    opacity: 0.8,\n\n  }\n});\n\nconst ShiftTable = (props) =>  {\n  const classes = useStyles();\n\n  return (\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead >\n          <TableRow >\n            <TableCell width=\"120px\" className={classes.headCell}>名前</TableCell>\n            {props.shiftWeek.map(value => {\n              if (value === \"休み\") {\n                return <TableCell width=\"75px\" key={value} className={classes.headCell} >{value}</TableCell>\n              } else {\n                return <TableCell width=\"75px\" key={value} className={classes.headCell} >{value}</TableCell>\n              }\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody >\n          {props.shiftList.map((shift, index) => {\n            return (\n              <TableRow key={String(index)}>\n                <TableCell className={classes.bodyCell_name} component=\"th\" scope=\"row\">\n                  {shift.name}\n                </TableCell>\n                {shift.list.map((value, index) => {\n                  if (value === \"休み\") {\n                    return <TableCell key={String(index)} className={classes.bodyCell_out}>{value}</TableCell>\n                  } else {\n                    return  <TableCell key={String(index)} className={classes.bodyCell}>{value}</TableCell>\n                  }\n                })}\n              </TableRow>\n            )\n          })}\n        </TableBody>\n      </Table>\n  );\n}\n\nexport default ShiftTable;","/Users/kitagawakeita/testProject/shift-app/src/templates/Members.jsx",["250","251","252"],"import React from 'react'\nimport { Divider } from '@material-ui/core';\nimport {useSelector} from 'react-redux';\nimport { UsersList } from '../components/UIkit'\nimport {getManagementList, getMemberList, getShiftList} from '../reducks/groups/selectors';\n\nconst getName = (arr, newArr) => {\n  arr.map(value => {\n    newArr.push(value.name)\n  })\n}\nconst getManage = (arr, newArr) => {\n  arr.map(value => {\n    if (value.manage) {\n      newArr.push(value.name);\n    }\n  })\n}\n\nconst Members = () => {\n  const selector = useSelector(state => state);\n\n  const memberList = getMemberList(selector);\n  const shiftList = getShiftList(selector);\n  \n  const member = [];\n  const shift = [];\n  const manager = [];\n  \n  getName(memberList, member);\n  getName(shiftList, shift);\n  getManage(memberList, manager);\n\n\n  const handInShift = [...new Set(member)].filter(value => shift.includes(value))\n  \n  const notHandInShift = [...member, ...shift].filter(value => (!member.includes(value) || !shift.includes(value)) && !manager.includes(value))\n  \n  return (\n    <div className=\"main-container\">\n      <h2>メンバー: {member.length}</h2>\n      <UsersList memberList={manager} title={\"管理者\"} />\n      <UsersList memberList={handInShift} title={\"提出者\"} />\n      <Divider />\n      <UsersList memberList={notHandInShift} title={\"未提出者\"}/>\n    </div>\n  )\n}\n\nexport default Members\n","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/UsersList.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/SecondButton.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TextArea.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/reducers.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/actions.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/store/initialState.js",[],"/Users/kitagawakeita/testProject/shift-app/src/serviceWorker.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/selectors.js",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/TextInput.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/CreateGroupPage.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/SignIn.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/ShiftList.jsx",["253"],"import React from 'react'\nimport {useSelector} from 'react-redux';\nimport { ShiftTable } from '../components'\nimport {getShiftList, getPrevShiftList} from '../reducks/groups/selectors';\n\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\n\nconst ShiftList = () => {\n  const sun = d.getDay() === 0 ? 7 : d.getDay();\n  const s = d.getDate() + (14 - sun + 1);\n  const firstDate = new Date(y, m - 1, s);\n  const prevFirstDate = new Date(y, m - 1, s - 7);\n\n  const shiftWeek = [];\n  for (var i = 0; i < 7; i++) {\n    const shiftDate = (firstDate.getDate());\n    const shiftDay = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"][firstDate.getDay()];\n\n    firstDate.setDate(firstDate.getDate() + 1);\n    shiftWeek.push(`${shiftDate}(${shiftDay})`);\n  }\n\n  const prevShiftWeek = [];\n  for (var i = 0; i < 7; i++) {\n    const shiftDate = (prevFirstDate.getDate());\n    const shiftDay = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"][prevFirstDate.getDay()];\n\n    prevFirstDate.setDate(prevFirstDate.getDate() + 1);\n    prevShiftWeek.push(`${shiftDate}(${shiftDay})`);\n  } \n\n  const selector = useSelector(state => state);\n  const shiftList = getShiftList(selector);\n  const prevShiftList = getPrevShiftList(selector);\n\n  return (\n    <div className=\"aaa\">\n      <h2>シフト一覧</h2>\n      <h3>{prevShiftWeek[0]}〜{prevShiftWeek[6]}</h3>\n      <ShiftTable shiftList={prevShiftList} shiftWeek={prevShiftWeek} />\n      <div className=\"midium-space\" />\n      <h3>{shiftWeek[0]}〜{shiftWeek[6]}</h3>\n      <ShiftTable shiftList={shiftList} shiftWeek={shiftWeek} />\n    </div>\n  )\n}\n\nexport default ShiftList","/Users/kitagawakeita/testProject/shift-app/src/templates/SignUp.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/reducers.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/actions.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/operations.js",["254","255","256","257","258","259","260"],"import {auth, db, FirebaseTimestamp} from '../../firebase/index';\nimport { fetchShiftsListAction, groupInAction } from '../groups/actions';\nimport {saveGroupId, deleteGroupId} from '../users/operations';\nimport {push} from 'connected-react-router'\nimport { ControlPointSharp } from '@material-ui/icons';\nimport ExitGroup from '../../SettingPages/ExitGroup';\n\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\nconst sun = d.getDay() === 0 ? 7 : d.getDay();\nconst s = d.getDate() + (14 - sun + 1);\nconst firstDate = new Date(y, m - 1, s);\nconst prevFirstDate = new Date(y, m - 1, s - 7);\nconst dateId = `${firstDate.getFullYear()}${firstDate.getMonth()}${firstDate.getDate()}`;\nconst prevDateId = `${prevFirstDate.getFullYear()}${prevFirstDate.getMonth()}${prevFirstDate.getDate()}`;\nconsole.log(prevDateId)\n\n\nexport const createGroup = (groupName, groupId, groupPassword, username, uid) => {\n  return async (dispatch) => {\n    if (username === \"\" || uid === \"\") {\n      alert(\"アカウントが必要です\");\n      dispatch(push(\"/signup\"))\n      return false;\n    }\n\n    const timestamp = FirebaseTimestamp.now();\n    const memberList = {\n      name: username,\n      id: uid,\n      manage: true,\n    }\n\n    const initializeDate = {\n      groupName: groupName,\n      groupId: groupId,\n      groupPassword: groupPassword,\n      created_at: timestamp,\n      updated_at: timestamp,\n      memberList: [memberList]\n    }\n\n    dispatch(groupInAction({\n      groupId: groupId,\n      groupPassword: groupPassword,\n      groupName: groupName,\n      memberList: [memberList],\n    }))\n\n    // const fetch = await dispatch(fetchShifts(groupId, dateId))\n\n    db.collection(\"groups\").doc(groupId).set(initializeDate)\n      .then(() => {\n        dispatch(saveGroupId(groupId, uid))\n        dispatch(push(\"/\"))\n      })\n  }\n}\n\nexport const deleeteShift = (uid, groupId, username) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).get()\n    const data = snapshot.data()\n    const shiftList = data.shiftList;\n    const upShift = []\n\n    shiftList.map(value => {\n      if(value.name === username) {\n        return false;\n      }\n      upShift.push(value);\n    })\n    const updateData = {\n      shiftList: upShift,\n    }\n    db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(updateData, {merge: true})\n      .then(() => {\n        console.log(\"ok\")\n        dispatch(fetchShiftsListAction({\n          shiftList: upShift,\n          prevShiftList: data.prevShiftList\n        }))\n      })\n  }\n}\n\nexport const exitGroup = (uid, groupId, username) => {\n  return async (dispatch) => {\n    if (!window.confirm(\"このグループを退会します。本当によろしいですか？\")) {\n      return false;\n    }\n    const timestamp = FirebaseTimestamp.now();\n    const snapshot = await db.collection(\"groups\").doc(groupId).get()\n\n    const data = snapshot.data()\n    const memberList = data.memberList;\n\n    const updateList = [];\n    memberList.map(value => {\n      if (value.name === username && value.id === uid) {\n        return false\n      } \n      updateList.push(value);\n    })\n    const updateData = {\n      memberList: updateList,\n      updated_at: timestamp,\n    }\n    db.collection(\"groups\").doc(groupId).set(updateData, {merge: true})\n      .then(() => {\n        dispatch(deleteGroupId(uid, groupId))\n        dispatch(deleeteShift(uid, groupId, username))\n\n        dispatch(groupInAction({\n          groupId: data.groupId,\n          groupPassword: data.groupPassword,\n          groupName: data.groupName,\n          memberList: updateList,\n        }))\n      })\n\n  }\n}\n\nexport const enterGroup = (groupname, groupId, username, uid) => {\n  return async (dispatch) => {\n    const id = String(groupId)\n    const snapshot = await db.collection(\"groups\").doc(id).get()\n\n    if (!snapshot.exists) {\n      alert (\"グループが存在しません\");\n      return false;\n    }\n    const data = snapshot.data();\n    if (data.groupName !== groupname) {\n      alert (\"グループ名とIDが一致しません\");\n      return false;\n    }\n    const memberList = data.memberList;\n\n    const newMember = {\n        name: username,\n        id: uid,\n        manage: false,\n    }\n    memberList.push(newMember);\n\n    const newData = {\n      memberList: memberList,\n    }\n\n    dispatch(groupInAction({\n      groupId: data.groupId,\n      groupPassword: data.groupPassword,\n      groupName: data.groupName,\n      memberList: memberList,\n    }))\n\n    const fetch = await dispatch(fetchShifts(groupId, dateId))\n\n    db.collection(\"groups\").doc(id).set(newData, {merge: true})\n      .then(() => {\n        dispatch(saveGroupId(groupId, uid, username))\n      })\n  }\n}\n\nexport const fetchShifts = (groupId, dateId) => {\n  const timestamp = FirebaseTimestamp.now();\n  console.log(\"aa\")\n  if (groupId === \"\") {\n    return false;\n  }\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).get()\n    if (!snapshot.exists) {\n      const prevSnapshot = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(prevDateId).get();\n      const prevShiftData = [];\n      if (prevSnapshot.exists) {\n        const prevData = prevSnapshot.data();\n        prevData.shiftList.forEach(value => {\n          prevShiftData.push(value)\n        })\n      }\n      console.log(prevShiftData)\n\n      const data ={\n        shiftList: [],\n        prevShiftList: prevShiftData,\n        created_at: timestamp,\n        updated_at: timestamp\n      }\n\n      db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(data)\n        .then(() => {\n          console.log(\"create-table\");\n          dispatch(fetchShiftsListAction({\n            shiftList: [],\n            prevShiftList: prevShiftData,\n          }))\n        })\n    } else {\n      const data = snapshot.data();\n  \n      dispatch(fetchShiftsListAction({\n        shiftList: data.shiftList,\n        prevShiftList: data.prevShiftList,\n      }))\n    }\n  }\n}\n\n// export const changeShiftName = (groupId, username, uid) => {\n//   // const timestamp = FirebaseTimestamp.now();\n//   return async (dispatch) => {\n//     const snapshot = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).get()\n//     const data = snapshot.data();\n//     // const shiftList = data.shiftList;\n//     // const prevShiftList = data.prevShiftList;\n//     // console.log(data)\n//     // if (shiftList.length > 0) {\n//     //   shiftList.forEach(value => {\n//     //     if (value.id === uid) {\n//     //       value.name = username;\n//     //     }\n//     //   })\n//     // }\n//     // console.log(prevShiftList)\n//     // if (prevShiftList.length > 0) {\n//     //   prevShiftList.forEach(value => {\n//     //     if (value.id === uid) {\n//     //       value.name = username\n//     //     }\n//     //   })\n//     // }\n//     const updateData = {\n//       shiftList: data.shiftList,\n//       prevShiftList: data.prevShiftList\n//     }\n\n//     dispatch(fetchShiftsListAction(updateData))\n\n//     const doc = await db.collection(\"groupId\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(updateData, {merge: true})\n//         console.log(\"tesutook\");\n//   }\n// }\n\nexport const saveShifts = (groupId, shift, name, uid) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    const doc = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).get()\n    const newData = {\n      name: name,\n      list: shift,\n      id: uid\n    }\n    console.log(newData)\n\n    if (doc.exists)  {\n      const data = doc.data();\n      const shiftList = data.shiftList;\n      const arr = [];\n      shiftList.map(value => {\n        arr.push(value.name);\n      })\n      if (arr.includes(newData.name)) {\n        alert(\"既に登録されています。\")\n        return false;\n      }\n\n      shiftList.push(newData);\n\n      const updateData = {\n        shiftList: shiftList,\n        updated_at: timestamp\n      }\n\n        \n      db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(updateData, {merge: true})\n      .then(() => {\n\n        dispatch(fetchShiftsListAction({\n          shiftList: shiftList,\n          prevShiftList: data.prevShiftList,\n        }))\n        alert(\"登録しました\")\n      })  \n      } else {\n        const prevSnapshot = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(prevDateId).get();\n        const prevShiftData = [];\n        if (prevSnapshot.exists) {\n          const prevData = prevSnapshot.data();\n          prevShiftData.push(prevData)\n        }\n\n        const initializeDate = {\n          shiftList: [newData],\n          created_at: timestamp,\n          prevShiftList: prevShiftData,\n          updated_at: timestamp\n        }\n        \n        db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(initializeDate)\n        .then(() => {\n          console.log('create');\n          dispatch(fetchShiftsListAction({\n              prevShiftList: prevShiftData,\n              shiftList: [newData],\n            }))\n            alert(\"登録しました\")\n          })\n      }\n  }\n}\nexport const changeShiftName = (groupId, name, uid) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    const doc = await db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).get()\n\n    const data = doc.data();\n\n    const shiftList = data.shiftList;\n    const prevShiftList = data.prevShiftList;\n  \n    if (shiftList.length > 0) {\n      shiftList.forEach(value => {\n        if (value.id === uid) {\n          value.name = name;\n        }\n      })\n    }\n\n    if (prevShiftList.length > 0) {\n      prevShiftList.forEach(value => {\n        if (value.id === uid) {\n          value.name = name\n        }\n      })\n    }\n\n    const updateData = {\n      shiftList: shiftList,\n      updated_at: timestamp,\n      prevShiftList: prevShiftList,\n    }\n        \n    db.collection(\"groups\").doc(groupId).collection(\"shiftsList\").doc(dateId).set(updateData, {merge: true})\n    .then(() => {\n\n      dispatch(fetchShiftsListAction({\n        shiftList: shiftList,\n        prevShiftList: prevShiftList,\n      }))\n      alert(\"変更しました\")\n    })  \n  }\n}\n\nexport const registManage = (managePassword, uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).get()\n    const data = snapshot.data()\n    if (data.groupPassword !== managePassword) {\n      alert (\"管理者パスワードが違います\");\n      return false;\n    } \n\n    const memberList = data.memberList;\n    memberList.forEach(value => {\n      if (value.pass === uid) {\n        value.manage = true;\n      }\n    })\n    const updateData = {\n      memberList: memberList\n    }\n    dispatch(groupInAction({\n      groupId: data.groupId,\n      groupPassword: data.groupPassword,\n      groupName: data.groupName,\n      memberList: memberList,\n    }))\n    db.collection(\"groups\").doc(groupId).set(updateData, {merge: true})\n      .then(() => {\n        alert (\"管理者登録しました\")\n      })\n  }\n}\n\nexport const changeMemberName = (name, uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"groups\").doc(groupId).get()\n    const data = snapshot.data()\n\n    const memberList = data.memberList;\n    memberList.forEach(value => {\n      if (value.id === uid) {\n        value.name = name;\n      }\n    })\n    const updateData = {\n      memberList: memberList, \n      groupName: \"tesuto\",\n    }\n    console.log(memberList)\n\n    dispatch(groupInAction({\n      groupId: data.groupId,\n      groupPassword: data.groupPassword,\n      groupName: data.groupName,\n      memberList: memberList,\n    }))\n\n    db.collection(\"groups\").doc(groupId).set(updateData, {merge: true})\n      .then(() => {\n        dispatch(changeShiftName(groupId, name, uid))\n      })\n  }\n} \n\nexport const changeGroupName = (groupId, newGroupName, password) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    const snapshot = await db.collection(\"groups\").doc(groupId).get()\n    const data = snapshot.data()\n\n    if (data.password !== password) {\n      alert (\"パスワードが違います\")\n      return false\n    }\n\n    const updateData = {\n      groupName: newGroupName,\n      updated_at: timestamp,\n    }\n\n    dispatch(groupInAction({\n      groupId: data.groupId,\n      groupPassword: data.groupPassword,\n      groupName: newGroupName,\n      memberList: data.memberList,\n    }))\n\n    db.collection(\"groups\").doc(groupId).set(updateData, {merge: true})\n      .then(() => {\n        console.log(\"kokokm\")\n      })\n  }\n}\n\n// export const changeGroupName = (groupId, groupName, managePassword) => {\n//   // const timestamp = FirebaseTimestamp.now()\n//   return async (dispatch) => {\n//     const snapshot = await db.collection(\"groupId\").doc(groupId).get();\n//     const data = snapshot.data()\n//     if (data.groupPassword !== managePassword) {\n//       alert (\"管理者パスワードが違います\");\n//       return false;\n//     }\n//     const updateData = {\n//       groupName: groupName,\n//       // updated_at: timestamp\n//     }\n//     dispatch(groupInAction({\n//       groupId: data.groupId,\n//       groupPassword: data.groupPassword,\n//       groupName: groupName,\n//       memberList: data.memberList,\n//     }))\n  \n//     const doc = await db.collection(\"groups\").doc(groupId).set(updateData, {merge: true})\n//       // .then(() => {\n//         alert (\"変更しました\")\n//       // })\n//   }\n// }\n\nexport const groupIn = (groupId) => {\n  const id = String(groupId)\n  return async (dispatch) => {\n    const snapshots = await db.collection(\"groups\").where(\"groupId\", \"==\", id).get()\n        snapshots.forEach(doc => {\n          const data = doc.data();\n          const memberList = data.memberList;\n          \n          dispatch(groupInAction({\n            groupId: data.groupId,\n            groupPassword: data.groupPassword,\n            groupName: data.groupName,\n            memberList: memberList,\n          }))\n        })\n  }\n}\n","/Users/kitagawakeita/testProject/shift-app/src/firebase/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/firebase/config.js",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/users/operations.js",["261","262","263","264"],"import { auth, db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport {signInAction, signOutAction} from './actions';\nimport {groupIn} from '../groups/operations';\nimport {fetchShifts} from '../groups/operations';\nimport {changeMemberName} from '../groups/operations';\n\nconst usersRef = db.collection(\"users\");\nconst d = new Date();\nconst y = d.getFullYear();\nconst m = d.getMonth() + 1;\n\nexport const deleteGroupId = (uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"users\").doc(uid).get();\n    const data = snapshot.data();\n\n    if (data.groupId !== groupId) {\n      return false;\n    }\n\n    const updateData = {\n      groupId: \"\"\n    }\n\n    dispatch(\n      signInAction({\n        isSignIn: true,\n        role: data.role,\n        uid: uid,\n        username: data.username,\n        groupId: \"\",\n      })\n    )\n    db.collection(\"users\").doc(uid).set(updateData, {merge: true})\n      .then(() => {\n        dispatch(push(\"/enter\"))\n      })\n  }\n}\n\nexport const listenAuthState = () => {\n  const sun = d.getDay() === 0 ? 7 : d.getDay();\n  const s = d.getDate() + (14 - sun + 1);\n  const firstDate = new Date(y, m - 1, s);\n  const dateId = `${firstDate.getFullYear()}${firstDate.getMonth()}${firstDate.getDate()}`;\n  return async (dispatch) => {\n    return auth.onAuthStateChanged( async (user) => {\n      console.log(\"tesuto\")\n      if (user) {\n        const uid = user.uid;\n\n        const doc = await usersRef.doc(uid).get()\n            const data = doc.data();\n            const groupId = data.groupId;\n\n            dispatch(\n              signInAction({\n                isSignIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n                groupId: groupId,\n              })\n            )\n            if (groupId !== \"\") {\n              dispatch(fetchShifts(groupId, dateId))\n              dispatch(groupIn(groupId))\n            } \n      } else {\n        dispatch(push(\"/signin\"));\n      }\n    })\n  }\n};\n\nexport const changeName = (name, uid, groupId) => {\n  return async (dispatch) => {\n    const snapshot = await db.collection(\"users\").doc(uid).get();\n    const data = snapshot.data()\n    const updateData = {\n      username: name\n    }\n    dispatch(\n      signInAction({\n        isSignIn: true,\n        role: data.role,\n        uid: uid,\n        username: name,\n        groupId: data.groupId,\n      })\n    )\n    db.collection(\"users\").doc(uid).set(updateData, {merge: true})\n      .then(() => {\n\n        dispatch(changeMemberName(name, uid, groupId))\n      })\n  }\n}\n\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    const timestamp = FirebaseTimestamp.now();\n    auth.signInWithEmailAndPassword(email, password).then((result) => {\n      const user = result.user;\n      \n      if (user) {\n        const uid = user.uid;\n\n        usersRef\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            dispatch(\n              signInAction({\n                isSignIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n                updated_at: timestamp,\n                groupId: data.groupId,\n              })\n            );\n\n            dispatch(push(\"/\"));\n            console.log(\"test-ol\")\n          })\n          .catch(() => {\n            alert(\"メールアドレスとパスワードが一致しません\");\n            console.log(Error);\n          });\n      }\n    });\n\n  }\n}\n\nexport const resetPassword = (email) => {\n  return async (dispatch) => {\n    // if (email === \"\") {\n    //   alert(\"必須項目が未入力です\");\n    //   return false;\n    // } else if (!isValidEmailFormat(email)) {\n    //   alert(\"メールアドレスの形式が不正です。\");\n    //   return false;\n    // }\n    {\n      auth\n        .sendPasswordResetEmail(email)\n        .then(() => {\n          alert(\n            \"入力されたアドレスにパスワードリセット用のメールをお送りしました。\"\n          );\n          dispatch(push(\"/signin\"));\n        })\n        .catch(() => {\n          alert(\"パスワードリセットに失敗しました。通信状況をご確認ください\");\n        });\n    }\n  };\n};\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    if (\n      username === \"\" ||\n      email === \"\" ||\n      password === \"\" ||\n      confirmPassword === \"\"\n    ) {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    // if (!isValidEmailFormat(email)) {\n    //   alert(\"メールアドレスの形式が不正です。もう1度お試しください。\");\n    //   return false;\n    // }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then( async (result) => {\n        const user = result.user;\n\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n            groupId: \"\",\n          };\n\n          const snapshot = await usersRef.doc(uid).set(userInitialData);\n\n          dispatch(push(\"/enter\"));\n        }\n      });\n  }\n}\n\nexport const saveGroupId = (groupId, uid, username) => {\n  const timestamp = FirebaseTimestamp.now();\n  return async (dispatch) => {\n    const data = {\n      groupId: groupId\n    }\n\n    dispatch(\n      signInAction({\n        isSignIn: true,\n        role: data.role,\n        uid: uid,\n        username: username,\n        groupId: groupId,\n      })\n    );\n    const setData = await db.collection(\"users\").doc(uid).set(data, {merge: true});\n\n    alert (\"保存しました\");\n    dispatch(push(\"/\"));\n  }\n}\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    auth.signOut().then(() => {\n      dispatch(signOutAction());\n      dispatch(push(\"/signin\"));\n    });\n  };\n};\n","/Users/kitagawakeita/testProject/shift-app/src/templates/EnterGroupPage.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/ConfirmDialog.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/reducks/groups/selectors.js",[],"/Users/kitagawakeita/testProject/shift-app/src/Auth.jsx",["265"],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { listenAuthState } from \"./reducks/users/operations\";\nimport { getIsSignedIn } from \"./reducks/users/selectors\";\n\nconst Auth = ({ children }) => {\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state);\n  const isSignedIn = getIsSignedIn(selector);\n\n  useEffect(() => {\n    if (!isSignedIn) {\n      dispatch(listenAuthState());\n    }\n  }, []);\n\n  if (!isSignedIn) {\n    return <></>;\n  } else {\n    return children;\n  }\n};\n\nexport default Auth;","/Users/kitagawakeita/testProject/shift-app/src/components/UIkit/SelectBox.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/components/ToggleContent.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeGroupName.jsx",["266","267","268"],"import React, {useCallback, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { PrimaryButton, TextInput } from '../components/UIkit';\nimport {ToggleContent} from '../components/index';\nimport {getUserId} from '../reducks/users/selectors';\nimport { changeGroupName } from '../reducks/groups/operations';\nimport { getGroupId, getGroupName } from '../reducks/groups/selectors';\n\n\nconst ChangeGroupName = () => {\n  const dispatch = useDispatch()\n  const selector = useSelector(state => state)\n  const uid = getUserId(selector);\n  const groupName = getGroupName(selector);\n  const groupId = getGroupId(selector)\n  const [password, setPassword] = useState(\"\"),\n    [newGroupName, setNewGroupName] = useState(\"\");\n\n  const inputPassword = useCallback((event) => {\n    setPassword(event.target.value);\n  }, [setPassword])\n  const inputNewGroupName = useCallback((event) => {\n    setNewGroupName(event.target.value);\n  }, [setNewGroupName])\n\n\n  return (\n    <>\n    <div className=\"content-form\">\n  {/* <p style={{margin: \"0\"}}>グループ名：{groupName}</p> */}\n    <TextInput label={\"管理者パスワード\"} type={\"password\"} value={password} onChange={inputPassword} />\n    <TextInput label={\"新しいグループ名\"} type={\"text\"} value={newGroupName} onChange={inputNewGroupName} />\n    </div>\n    <div className=\"content-button\">\n    <PrimaryButton label={\"変更する\"} onClick={() => dispatch(changeGroupName(groupId, newGroupName, password))} />\n    </div>\n    </>\n  )\n}\n\nexport default ChangeGroupName;\n","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/index.js",[],"/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangeName.jsx",["269","270","271","272"],"import React, {useCallback, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getUserId} from '../reducks/users/selectors';\nimport { PrimaryButton, TextInput } from '../components/UIkit';\nimport {ToggleContent} from '../components/index';\nimport {changeName} from '../reducks/users/operations';\nimport { getGroupId} from '../reducks/groups/selectors';\nimport {getUserName} from '../reducks/users/selectors';\n\nconst ChangeName = () => {\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state);\n  const [password, setPassword] = useState(\"\"),\n    [newName, setNewName] = useState(\"\");\n\n  const uid = getUserId(selector);\n  const groupId = getGroupId(selector);\n  const username = getUserName(selector);\n\n  const inputPassword = useCallback((event) => {\n    setPassword(event.target.value);\n  }, [setPassword]);\n  \n  const inputNewName = useCallback((event) => {\n    setNewName(event.target.value);\n  }, [setNewName]);\n\n  return (\n    <>\n    <div className=\"content-form\">\n      {/* <p style={{margin: \"0 12px\"}}>名前：{username}</p> */}\n      <TextInput label={\"新しい名前\"} type={\"text\"} value={newName} onChange={inputNewName} />\n      </div>\n      <div className=\"content-button\">\n      <PrimaryButton label={\"変更する\"} onClick={() => dispatch(changeName(newName, uid, groupId))} />\n      </div>\n    </>\n  )\n}\n\nexport default ChangeName\n","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ChangePassword.jsx",["273"],"import React, {useCallback, useState} from 'react'\nimport {useDispatch} from 'react-redux';\nimport { PrimaryButton, TextInput } from '../components/UIkit';\nimport {ToggleContent} from '../components/index';\nimport { resetPassword } from '../reducks/users/operations';\n\nconst ChangePassword = () => {\n  const [email, setEmail] = useState(\"\");\n  const dispatch = useDispatch()\n\n  const inputEmail = useCallback((event) => {\n    setEmail(event.target.value)\n  }, [setEmail])\n\n  return (\n    <>\n    <div className=\"content-form\" >\n    <TextInput label={\"メールアドレス\"} type={\"email\"} value={email} onChange={inputEmail} />\n    </div>\n    <div className=\"content-button\">\n    <PrimaryButton label={\"変更メールを送る\"} onClick={() => dispatch(resetPassword(email))} />\n    </div>\n    </>\n  )\n}\n\nexport default ChangePassword\n","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/RegistManage.jsx",["274"],"import React, {useCallback, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport { PrimaryButton, TextInput } from '../components/UIkit';\nimport {ToggleContent} from '../components/index';\nimport {registManage} from '../reducks/groups/operations';\nimport {getUserId} from '../reducks/users/selectors';\nimport {getGroupId} from '../reducks/groups/selectors';\n\nconst RegistManage = () => {\n  const dispatch = useDispatch();\n  const [managePassword, setManagePassword] = useState(\"\");\n  const selector = useSelector(state => state);\n  const uid = getUserId(selector);\n  const groupId = getGroupId(selector);\n\n  const inputManagePassword = useCallback((event) => {\n    setManagePassword(event.target.value)\n  }, [setManagePassword]);\n\n  return (\n    <>\n    <div className=\"content-form\">\n    <TextInput label={\"管理者パスワード\"} type={\"text\"} value={managePassword} onChange={inputManagePassword} />\n    </div>\n    <div className=\"content-button\">\n    <PrimaryButton label={\"登録する\"} onClick={() => dispatch(registManage(managePassword, uid, groupId))} />\n    </div>\n  </>\n  )\n}\n\nexport default RegistManage\n","/Users/kitagawakeita/testProject/shift-app/src/SettingPages/ExitGroup.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Top.jsx",[],"/Users/kitagawakeita/testProject/shift-app/src/templates/Reset.jsx",[],{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","severity":1,"message":"280","line":8,"column":8,"nodeType":"281","messageId":"282","endLine":8,"endColumn":17},{"ruleId":"279","severity":1,"message":"283","line":9,"column":10,"nodeType":"281","messageId":"282","endLine":9,"endColumn":14},{"ruleId":"279","severity":1,"message":"284","line":10,"column":8,"nodeType":"281","messageId":"282","endLine":10,"endColumn":16},{"ruleId":"279","severity":1,"message":"285","line":11,"column":8,"nodeType":"281","messageId":"282","endLine":11,"endColumn":18},{"ruleId":"279","severity":1,"message":"286","line":36,"column":9,"nodeType":"281","messageId":"282","endLine":36,"endColumn":19},{"ruleId":"287","severity":1,"message":"288","line":57,"column":25,"nodeType":"289","messageId":"290","endLine":57,"endColumn":27},{"ruleId":"291","severity":1,"message":"292","line":50,"column":6,"nodeType":"293","endLine":50,"endColumn":24,"suggestions":"294"},{"ruleId":"279","severity":1,"message":"295","line":1,"column":16,"nodeType":"281","messageId":"282","endLine":1,"endColumn":27},{"ruleId":"279","severity":1,"message":"296","line":1,"column":29,"nodeType":"281","messageId":"282","endLine":1,"endColumn":37},{"ruleId":"279","severity":1,"message":"297","line":2,"column":9,"nodeType":"281","messageId":"282","endLine":2,"endColumn":20},{"ruleId":"279","severity":1,"message":"298","line":3,"column":10,"nodeType":"281","messageId":"282","endLine":3,"endColumn":23},{"ruleId":"279","severity":1,"message":"299","line":3,"column":25,"nodeType":"281","messageId":"282","endLine":3,"endColumn":34},{"ruleId":"279","severity":1,"message":"300","line":5,"column":38,"nodeType":"281","messageId":"282","endLine":5,"endColumn":52},{"ruleId":"279","severity":1,"message":"301","line":6,"column":10,"nodeType":"281","messageId":"282","endLine":6,"endColumn":17},{"ruleId":"279","severity":1,"message":"302","line":9,"column":10,"nodeType":"281","messageId":"282","endLine":9,"endColumn":14},{"ruleId":"279","severity":1,"message":"303","line":5,"column":9,"nodeType":"281","messageId":"282","endLine":5,"endColumn":26},{"ruleId":"287","severity":1,"message":"288","line":8,"column":17,"nodeType":"289","messageId":"290","endLine":8,"endColumn":19},{"ruleId":"287","severity":1,"message":"288","line":13,"column":17,"nodeType":"289","messageId":"290","endLine":13,"endColumn":19},{"ruleId":"304","severity":1,"message":"305","line":26,"column":12,"nodeType":"281","messageId":"306","endLine":26,"endColumn":13},{"ruleId":"279","severity":1,"message":"307","line":1,"column":9,"nodeType":"281","messageId":"282","endLine":1,"endColumn":13},{"ruleId":"279","severity":1,"message":"308","line":5,"column":10,"nodeType":"281","messageId":"282","endLine":5,"endColumn":27},{"ruleId":"279","severity":1,"message":"309","line":6,"column":8,"nodeType":"281","messageId":"282","endLine":6,"endColumn":17},{"ruleId":"287","severity":1,"message":"310","line":68,"column":25,"nodeType":"289","messageId":"311","endLine":68,"endColumn":27},{"ruleId":"287","severity":1,"message":"310","line":100,"column":26,"nodeType":"289","messageId":"311","endLine":100,"endColumn":28},{"ruleId":"279","severity":1,"message":"312","line":160,"column":11,"nodeType":"281","messageId":"282","endLine":160,"endColumn":16},{"ruleId":"287","severity":1,"message":"288","line":264,"column":27,"nodeType":"289","messageId":"290","endLine":264,"endColumn":29},{"ruleId":"313","severity":1,"message":"314","line":149,"column":5,"nodeType":"315","messageId":"316","endLine":161,"endColumn":6},{"ruleId":"279","severity":1,"message":"317","line":206,"column":17,"nodeType":"281","messageId":"282","endLine":206,"endColumn":25},{"ruleId":"279","severity":1,"message":"318","line":215,"column":9,"nodeType":"281","messageId":"282","endLine":215,"endColumn":18},{"ruleId":"279","severity":1,"message":"319","line":230,"column":11,"nodeType":"281","messageId":"282","endLine":230,"endColumn":18},{"ruleId":"291","severity":1,"message":"320","line":15,"column":6,"nodeType":"293","endLine":15,"endColumn":8,"suggestions":"321"},{"ruleId":"279","severity":1,"message":"322","line":4,"column":9,"nodeType":"281","messageId":"282","endLine":4,"endColumn":22},{"ruleId":"279","severity":1,"message":"323","line":13,"column":9,"nodeType":"281","messageId":"282","endLine":13,"endColumn":12},{"ruleId":"279","severity":1,"message":"324","line":14,"column":9,"nodeType":"281","messageId":"282","endLine":14,"endColumn":18},{"ruleId":"279","severity":1,"message":"322","line":5,"column":9,"nodeType":"281","messageId":"282","endLine":5,"endColumn":22},{"ruleId":"279","severity":1,"message":"325","line":13,"column":10,"nodeType":"281","messageId":"282","endLine":13,"endColumn":18},{"ruleId":"279","severity":1,"message":"326","line":18,"column":9,"nodeType":"281","messageId":"282","endLine":18,"endColumn":17},{"ruleId":"279","severity":1,"message":"327","line":20,"column":9,"nodeType":"281","messageId":"282","endLine":20,"endColumn":22},{"ruleId":"279","severity":1,"message":"322","line":4,"column":9,"nodeType":"281","messageId":"282","endLine":4,"endColumn":22},{"ruleId":"279","severity":1,"message":"322","line":4,"column":9,"nodeType":"281","messageId":"282","endLine":4,"endColumn":22},"no-native-reassign",["328"],"no-negated-in-lhs",["329"],"no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'fade' is defined but never used.","'MenuIcon' is defined but never used.","'SearchIcon' is defined but never used.","'finishDate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'timeLange'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["330"],"'useCallback' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'PrimaryButton' is defined but never used.","'TextInput' is defined but never used.","'ChangePassword' is defined but never used.","'Divider' is defined but never used.","'blue' is defined but never used.","'getManagementList' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'auth' is defined but never used.","'ControlPointSharp' is defined but never used.","'ExitGroup' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'fetch' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'snapshot' is assigned a value but never used.","'timestamp' is assigned a value but never used.","'setData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'isSignedIn'. Either include them or remove the dependency array.",["331"],"'ToggleContent' is defined but never used.","'uid' is assigned a value but never used.","'groupName' is assigned a value but never used.","'password' is assigned a value but never used.","'username' is assigned a value but never used.","'inputPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},"Update the dependencies array to be: [start, end, open, props, timeLange]",{"range":"336","text":"337"},"Update the dependencies array to be: [dispatch, isSignedIn]",{"range":"338","text":"339"},[1326,1344],"[start, end, open, props, timeLange]",[473,475],"[dispatch, isSignedIn]"]